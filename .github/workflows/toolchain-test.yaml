name: Run Toolchain

on:
  push:
    paths:
      - 'input-diagrams/**'
  workflow_dispatch:

jobs:
  test-toolchain:
    runs-on: ubuntu-latest

    steps:
    - name: Checkout repo
      uses: actions/checkout@v3

    - name: Setup Java 21 (for mx2dtx)
      uses: actions/setup-java@v3
      with:
        distribution: 'temurin'
        java-version: 21

    - name: Setup Maven
      run: sudo apt-get install -y maven

    - name: Setup Python 3.13
      uses: actions/setup-python@v4
      with:
        python-version: '3.13'

    - name: Install SWI-Prolog
      run: |
        sudo apt-get update
        sudo apt-get install -y software-properties-common
        sudo apt-add-repository ppa:swi-prolog/stable
        sudo apt-get update
        sudo apt-get install -y swi-prolog

    - name: Create Maven settings.xml with secrets
      env:
        GITHUB_USERNAME: ${{ secrets.GH_USERNAME }}
        GITHUB_PAT: ${{ secrets.GH_PAT }}
      run: |
        cat <<EOF > settings.xml
        <settings xmlns="http://maven.apache.org/SETTINGS/1.0.0"
                  xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
                  xsi:schemaLocation="http://maven.apache.org/SETTINGS/1.0.0
                                      http://maven.apache.org/xsd/settings-1.0.0.xsd">
          <activeProfiles>
              <activeProfile>github</activeProfile>
          </activeProfiles>

          <profiles>
              <profile>
                  <id>github</id>
                  <repositories>
                      <repository>
                          <id>github</id>
                          <name>Github Packages</name>
                          <url>https://maven.pkg.github.com/nina2dv/xml-validation</url>
                          <snapshots>
                              <enabled>true</enabled>
                              <updatePolicy>always</updatePolicy>
                          </snapshots>
                          <releases>
                              <enabled>true</enabled>
                          </releases>
                      </repository>
                  </repositories>
              </profile>
          </profiles>

          <servers>
              <server>
                  <id>github</id>
                  <username>$GITHUB_USERNAME</username>
                  <password>$GITHUB_PAT</password>
              </server>
          </servers>
        </settings>
        EOF

    - name: Clone mx2dtx repository
      run: git clone https://github.com/cmg-yorku/mx2dtx.git

    - name: Build mx2dtx
      run: |
        cd mx2dtx
        mvn compile -s ../settings.xml

    - name: Clone dtx2X repository
      run: git clone https://github.com/cmg-yorku/dtx2X.git

    - name: Build and install dtx2X
      run: |
        cd dtx2X
        mvn clean install -s ../settings.xml -DskipTests

    - name: Clone dtg2sim and setup
      run: |
        git clone https://github.com/cmg-yorku/dtg2sim.git
        cd dtg2sim
        python -m venv venv
        source venv/bin/activate
        python -m pip install --upgrade pip
        pip install -r requirements.txt

    - name: Create test runner script
      run: |
        cat > dtg2sim/run_tests.py << 'EOF'
#!/usr/bin/env python
import sys
import os
import contextlib
import io

# Add the src directory to the path
sys.path.insert(0, os.path.join(os.path.dirname(__file__), 'src'))

from GMEnv import GMEnv
from QueryEngine import QueryEngine
from dtg2sim import dtg2sim

def test_spec(filename):
    """Test a DT-Golog specification"""
    print(f"\n{'='*60}")
    print(f"Testing: {filename}")
    print('='*60)
    
    if not os.path.exists(filename):
        print(f"Error: File {filename} not found")
        return False
    
    try:
        # Initialize the environment
        e = QueryEngine(filename)
        g = GMEnv(qEng=e)
        c = dtg2sim(g)
        
        print(f"✓ Successfully loaded specification")
        
        # Test simulation
        print("\n--- Running Simulation (100 episodes) ---")
        try:
            with contextlib.redirect_stdout(io.StringIO()) as f:
                avg_reward = c.simulate(episodes=100)
            print(f"✓ Simulation complete. Average reward: {avg_reward:.4f}")
        except Exception as e:
            print(f"✗ Simulation failed: {e}")
            return False
        
        # Test training (reduced iterations for CI)
        print("\n--- Running Training (1000 iterations) ---")
        try:
            with contextlib.redirect_stdout(io.StringIO()) as f:
                train_params = c.train(learn_iter=1000, logging=1000, algo="A2C")
            print(f"✓ Training complete")
        except Exception as e:
            print(f"✗ Training failed: {e}")
            return False
        
        # Test the trained model
        print("\n--- Testing Trained Model (100 episodes) ---")
        try:
            with contextlib.redirect_stdout(io.StringIO()) as f:
                test_reward = c.test(test_iter=100)
            if test_reward != -1:
                print(f"✓ Testing complete. Average reward: {test_reward:.4f}" if test_reward != 'N/A' else "✓ Testing complete (N/A)")
            else:
                print("✗ No trained model to test")
        except Exception as e:
            print(f"✗ Testing failed: {e}")
            return False
        
        # Clean up
        c.close()
        print(f"\n✓ All tests passed for {filename}")
        return True
        
    except Exception as e:
        print(f"✗ Error initializing environment: {e}")
        return False

if __name__ == "__main__":
    if len(sys.argv) > 1:
        spec_file = sys.argv[1]
        success = test_spec(spec_file)
        sys.exit(0 if success else 1)
    else:
        print("Usage: python run_tests.py <spec_file.pl>")
        sys.exit(1)
EOF
        chmod +x dtg2sim/run_tests.py

    - name: Process all files through toolchain
      shell: bash
      run: |
        set -e
        
        # Activate Python virtual environment
        source dtg2sim/venv/bin/activate
        
        # Create output directory
        mkdir -p output
        
        for xml_file in input-diagrams/*.xml; do
          if [ -f "$xml_file" ]; then
            echo ""
            echo "=========================================="
            echo "Processing $xml_file"
            echo "=========================================="
            
            basefile=$(basename "$xml_file" .xml)
            
            # Step 1: mx2dtx - Convert Drawio to DTX
            echo "Step 1: Converting Drawio to DTX..."
            cd mx2dtx
            mvn exec:java -s ../settings.xml -Dexec.mainClass="ca.yorku.cmg.mx2dtx.Main" \
                         -Dexec.args="-f ../input-diagrams/${basefile}.xml -o ../output/${basefile}-dtx.xml"
            cd ..
            
            if [ ! -f "output/${basefile}-dtx.xml" ]; then
              echo "Error: DTX file not created"
              continue
            fi
            echo "DTX file created: output/${basefile}-dtx.xml"
            
            # Step 2: dtx2X - Convert DTX to DT-Golog
            echo "Step 2: Converting DTX to DT-Golog..."
            cd dtx2X
            mvn exec:java -s ../settings.xml -Dexec.mainClass="ca.yorku.cmg.dtx2x.Main" \
                         -Dexec.args="-f ../output/${basefile}-dtx.xml -o ../output/${basefile}-dtg.pl"
            cd ..
            
            if [ ! -f "output/${basefile}-dtg.pl" ]; then
              echo "Error: DT-Golog file not created"
              continue
            fi
            echo "DT-Golog file created: output/${basefile}-dtg.pl"
            
            # Step 3: dtg2sim - Test the DT-Golog specification
            echo "Step 3: Testing DT-Golog specification with dtg2sim..."
            cd dtg2sim
            python run_tests.py ../output/${basefile}-dtg.pl
            cd ..
            
            echo "ompleted processing $xml_file"
          fi
        done
        
        echo ""
        echo "=========================================="
        echo "All files processed successfully!"
        echo "=========================================="

    - name: List output files
      run: |
        echo "Generated files:"
        ls -la output/ || echo "No output directory found"

    - name: Upload output files as artifacts
      uses: actions/upload-artifact@v4
      with:
        name: toolchain-outputs
        path: |
          output/*-dtx.xml
          output/*-dtg.pl
        if-no-files-found: warn